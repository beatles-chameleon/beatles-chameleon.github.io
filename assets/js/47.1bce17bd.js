(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{390:function(t,a,e){t.exports=e.p+"assets/img/downgrade_design_ios.287826ca.png"},391:function(t,a,e){t.exports=e.p+"assets/img/cml_doc_android_01.9001d906.png"},392:function(t,a,e){t.exports=e.p+"assets/img/request_show.5559bebc.png"},466:function(t,a,e){"use strict";e.r(a);var s=e(17),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"cml-sdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cml-sdk"}},[t._v("#")]),t._v(" CML SDK")]),t._v(" "),s("p",[t._v("Native SDK 目标让客户端上趋近于各类小程序引擎，使同一套代码平滑在客户端上运行。")]),t._v(" "),s("p",[t._v("使用 CML 的渲染能力，需要集成对应平台的 SDK。请在左侧目录中根据你需要接入的平台来查看文档。")]),t._v(" "),s("h2",{attrs:{id:"ios-sdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ios-sdk"}},[t._v("#")]),t._v(" iOS SDK")]),t._v(" "),s("p",[t._v("CML iOS SDK 使用 Weex、React Native 与 WebView 作为基础渲染引擎，提供了基础的组件功能之外，还支持用户扩展自己的功能组件。")]),t._v(" "),s("h3",{attrs:{id:"环境要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境要求"}},[t._v("#")]),t._v(" 环境要求")]),t._v(" "),s("p",[t._v("CML 最低支持的 iOS deployment target 为："),s("strong",[s("code",[t._v("iOS 9.0")])]),t._v("\nCML 使用"),s("code",[t._v("Cocoapods")]),t._v("进行管理，使用"),s("code",[t._v("npm")]),t._v("管理"),s("code",[t._v("react_native")]),t._v("。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("组件名")]),t._v(" "),s("th",[t._v("依赖版本")]),t._v(" "),s("th",[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Cocoapods")]),t._v(" "),s("td",[s("strong",[s("code",[t._v("1.3.1")])])]),t._v(" "),s("td",[t._v("-")])]),t._v(" "),s("tr",[s("td",[t._v("npm")]),t._v(" "),s("td",[t._v("最新版本即可")]),t._v(" "),s("td",[t._v("-")])]),t._v(" "),s("tr",[s("td",[t._v("Weex SDK")]),t._v(" "),s("td",[s("strong",[s("code",[t._v("0.19.0.2")])])]),t._v(" "),s("td",[t._v("-")])]),t._v(" "),s("tr",[s("td",[t._v("React Native")]),t._v(" "),s("td",[s("strong",[s("code",[t._v("0.57.6")])])]),t._v(" "),s("td",[t._v("-")])]),t._v(" "),s("tr",[s("td",[t._v("React")]),t._v(" "),s("td",[s("strong",[s("code",[t._v("16.6.1")])])]),t._v(" "),s("td",[t._v("-")])])])]),t._v(" "),s("h3",{attrs:{id:"详细集成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#详细集成"}},[t._v("#")]),t._v(" 详细集成")]),t._v(" "),s("p",[t._v("当 SDK 下载下来后，首先进入"),s("code",[t._v("/chameleon-sdk-iOS/Chameleon/react_native")]),t._v(",并运行"),s("code",[t._v("npm install")]),t._v("进行更新。（这也是 React Native 的更新办法。）")]),t._v(" "),s("p",[t._v("接下来我们以 Demo 工程为例（要注意工程路径位置,在工程实际配置中需要注意 :path 的内容）。")]),t._v(" "),s("p",[t._v("在 Podfile 中，写入：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("platform :ios, '9.0'\n\ntarget 'Chameleon_Example' do\n\n    ##CML        pod 'Chameleon', :path => '../Chameleon/'\n\n    ## 如果需要Weex，则写入weex依赖。\n    pod 'WeexSDK', '~> 0.19.0.2'\n\n    ## 如果需要react_native，则写入react_native依赖。\n    pod 'React', :path => '../Chameleon/react_native/node_modules/react-native', :subspecs => [\n    'Core',\n    'CxxBridge', ##  如果RN版本 >= 0.45则加入此行\n    'DevSupport', ##  如果RN版本 >= 0.43，则需要加入此行才能开启开发者菜单\n    'RCTText',\n    'RCTNetwork',\n    'RCTWebSocket', ##  这个模块是用于调试功能的\n    ]\n\n    pod 'yoga', :path => '../Chameleon/react_native/node_modules/react-native/ReactCommon/yoga'\n    pod 'DoubleConversion', :podspec => '../Chameleon/react_native/node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'\n    pod 'glog', :podspec => '../Chameleon/react_native/node_modules/react-native/third-party-podspecs/GLog.podspec'\n    pod 'Folly', :podspec => '../Chameleon/react_native/node_modules/react-native/third-party-podspecs/Folly.podspec'\n\nend\n")])])]),s("p",[t._v("将 podfile 保存，并运行 pod install。")]),t._v(" "),s("h3",{attrs:{id:"常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Multiple commands produce")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  Showing All Messages\n  :-1: Multiple commands produce 'XXXXX':\n  1) Target 'Chameleon_Example' has create directory command with output 'XXXXp'\n  2) That command depends on command in Target 'Chameleon_Example': script phase “[CP] Copy Pods Resources”\n")])])])])]),t._v(" "),s("p",[t._v("解决办法：删除 "),s("code",[t._v("工程->Build Phrases->[CP] Copy Pods Resources->Output files")]),t._v("下的 copy 路径。")]),t._v(" "),s("h3",{attrs:{id:"项目目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目目录"}},[t._v("#")]),t._v(" 项目目录")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("CML")]),t._v(" "),s("td",[t._v("SDK 源码与依赖文件夹")])]),t._v(" "),s("tr",[s("td",[t._v("Example")]),t._v(" "),s("td",[t._v("react_native 依赖")])])])]),t._v(" "),s("p",[t._v("####CMLsdk_src")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("目录")]),t._v(" "),s("th",[t._v("功能描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("CMLSDKEngine 类")]),t._v(" "),s("td",[t._v("初始化 SDK、注册自定义的 Module 等功能")])]),t._v(" "),s("tr",[s("td",[t._v("CMLCommon")]),t._v(" "),s("td",[t._v("CML 抽象层。抽象了基础的渲染页面、缓存、配置、预加载等功能。")])]),t._v(" "),s("tr",[s("td",[t._v("CMLReactNative")]),t._v(" "),s("td",[t._v("针对 ReactNative 额外配置的部分")])]),t._v(" "),s("tr",[s("td",[t._v("CMLWeex")]),t._v(" "),s("td",[t._v("针对 Weex 额外配置的部分")])]),t._v(" "),s("tr",[s("td",[t._v("CMLWeb")]),t._v(" "),s("td",[t._v("针对 WebView 额外配置的部分")])])])]),t._v(" "),s("h3",{attrs:{id:"提供功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提供功能"}},[t._v("#")]),t._v(" 提供功能")]),t._v(" "),s("h4",{attrs:{id:"bundle-预加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bundle-预加载"}},[t._v("#")]),t._v(" Bundle 预加载")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("先设置预加载地址")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('[CMLEnvironmentManage chameleon].weexService.config.prefetchContents = @[@"http%3A%2F%2F172.22.139.32%3A8000%2Fweex%2Fchameleon-bridge.js%3Ft%3D1546502643623"];\n')])])])])]),t._v(" "),s("li",[s("p",[t._v("开始预加载")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("    [[CMLEnvironmentManage chameleon].weexService setupPrefetch];\n")])])])])])]),t._v(" "),s("h4",{attrs:{id:"自动降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动降级"}},[t._v("#")]),t._v(" 自动降级")]),t._v(" "),s("p",[t._v("当 Bundle 下载失败、渲染出现严重错误时，会自动降级至 H5。\n"),s("img",{attrs:{src:e(390),alt:""}}),t._v("\n降级设计图")]),t._v(" "),s("h5",{attrs:{id:"本地-bundle-降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地-bundle-降级"}},[t._v("#")]),t._v(" 本地 bundle 降级")]),t._v(" "),s("p",[t._v("当 H5 渲染失败时，倘若设置了默认的本地 bundle，会使用本地 bundle 进行降级。")]),t._v(" "),s("h5",{attrs:{id:"主动降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主动降级"}},[t._v("#")]),t._v(" 主动降级")]),t._v(" "),s("p",[t._v("当渲染出现错误时，FE 可以通过 JSBridge 通知客户端触发降级。")]),t._v(" "),s("h4",{attrs:{id:"功能扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能扩展"}},[t._v("#")]),t._v(" 功能扩展")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("+ (void)registerModule:(NSString *)moduleName className:(NSString *)className;")]),t._v("注册自己的扩展。")]),t._v(" "),s("h3",{attrs:{id:"使用说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用说明"}},[t._v("#")]),t._v(" 使用说明")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("初始化 SDK")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("[CMLSDKEngine initSDKEnvironment];\n")])])])])]),t._v(" "),s("li",[s("p",[t._v("设置渲染引擎类型")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("[CMLEnvironmentManage chameleon].serviceType = CMLServiceTypeWeex;\n")])])])])]),t._v(" "),s("li",[s("p",[t._v("设置预加载环境")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('[CMLEnvironmentManage chameleon].weexService.config.prefetchContents = @[@"http%3A%2F%2F172.22.139.32%3A8000%2Fweex%2Fchameleon-bridge.js%3Ft%3D1546502643623"];\n')])])])])]),t._v(" "),s("li",[s("p",[t._v("设置预加载")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("[[CMLEnvironmentManage chameleon].weexService setupPrefetch];\n")])])])])])]),t._v(" "),s("h3",{attrs:{id:"module-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module-的使用"}},[t._v("#")]),t._v(" Module 的使用")]),t._v(" "),s("h4",{attrs:{id:"什么是-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-module"}},[t._v("#")]),t._v(" 什么是 Module")]),t._v(" "),s("p",[t._v("module 是 Native 提供给前端页面调用的，完成一组操作的方法集合，用于扩展 Native 的能力。在 CML 页面中，开发者引入相关 js 库后即可调用 Module 中的方法。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import bridge from 'chameleon-bridge';\n\n// 主动调用客户端方法\nexport function sayHello() {\n    bridge.callNative(\n        'moduleDemo', // 模块名\n        'sayHello', // 方法名\n        {}, // 参数\n        res => {} // 回调方法\n    );\n}\n")])])]),s("h4",{attrs:{id:"使用-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-module"}},[t._v("#")]),t._v(" 使用 Module")]),t._v(" "),s("p",[t._v("Module 的使用分两种情况，一种是使用 CML SDK 内置的 Module，一种是用户自定义实现自己的 Module。")]),t._v(" "),s("h5",{attrs:{id:"使用内置的-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用内置的-module"}},[t._v("#")]),t._v(" 使用内置的 Module")]),t._v(" "),s("p",[t._v("内置的 Module 在 js 前端代码里直接使用即可，目前内置的 Module 有：")]),t._v(" "),s("ul",[s("li",[t._v("clipboard")]),t._v(" "),s("li",[t._v("cml")]),t._v(" "),s("li",[t._v("modal")]),t._v(" "),s("li",[t._v("storage")]),t._v(" "),s("li",[t._v("stream")]),t._v(" "),s("li",[t._v("webSocket")])]),t._v(" "),s("p",[t._v("API 文档里描述的能力，部分实现就是由上述 Module 支撑的。")]),t._v(" "),s("h5",{attrs:{id:"自定义实现自己的-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义实现自己的-module"}},[t._v("#")]),t._v(" 自定义实现自己的 Module")]),t._v(" "),s("p",[t._v("示例可参看"),s("RouterLink",{attrs:{to:"/tutorial/ios-sdk.html"}},[t._v("CMLStorageModule 示例")])],1),t._v(" "),s("p",[t._v("注册自己的 Module 关联文件:")]),t._v(" "),s("ul",[s("li",[t._v("CMLSDKEngine")]),t._v(" "),s("li",[t._v("CMLConstants")]),t._v(" "),s("li",[t._v("CMLUtility")]),t._v(" "),s("li",[t._v("CMLModuleProtocol 非必须（该协议可获取 CMLInstance）")])]),t._v(" "),s("p",[t._v("详细说明")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("功能：通过注册 Module 提供原生能力的扩展")])]),t._v(" "),s("li",[s("p",[t._v("原理：依赖 bridge 进行协议通信，根据不同 Module 进行协议处理分发")])]),t._v(" "),s("li",[s("p",[t._v("Module，扩展原生能力")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Module 注册")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('[CMLSDKEngine registerModule:@"module名" className:@"类名"];\n')])])]),s("ul",[s("li",[t._v("Module 名:两端及前端同学定义的一个名字")])])]),t._v(" "),s("li",[s("p",[t._v("Module 方法实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('  #import "CMLConstants.h"\n  #import "CMLUtility.h"\n\n  CML_EXPORT_METHOD(@selector(xxx:callBack:))\n\n  - (void)xxx:(NSDictionary *)param callBack:(CMLMoudleCallBack)callback {\n\n  }\n')])])]),s("ul",[s("li",[t._v("xxx:方法名，协商定义，需要跟前端一致")]),t._v(" "),s("li",[t._v("param：所带参数，字典类型")]),t._v(" "),s("li",[t._v("callback：回调 block (非必须)")])])]),t._v(" "),s("li",[s("p",[t._v("遵循 CMLModuleProtocol 的作用")]),t._v(" "),s("ul",[s("li",[t._v("CMLModuleProtocol 协议可获取到 CMLInstance")]),t._v(" "),s("li",[t._v("通过 CMLInstance 可获取当前运行环境、viewController")])])])])])]),t._v(" "),s("h3",{attrs:{id:"预加载和缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预加载和缓存"}},[t._v("#")]),t._v(" 预加载和缓存")]),t._v(" "),s("h4",{attrs:{id:"预加载和缓存概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预加载和缓存概念"}},[t._v("#")]),t._v(" 预加载和缓存概念")]),t._v(" "),s("p",[t._v("预加载和缓存都是为了节省 JSBundle 下载的时间，加快 UI 的渲染。")]),t._v(" "),s("h5",{attrs:{id:"预加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预加载"}},[t._v("#")]),t._v(" 预加载")]),t._v(" "),s("p",[t._v("预加载是将下载 JSBundle 的动作提前完成，在需要用到的时候直接从本地读取并渲染。实际项目使用中，可以将需要预加载的 url 配置到预加载地址列表里，在 app 启动时提前从服务端获取，通过 CML SDK 提供的预加载能力提前下载下来。")]),t._v(" "),s("h5",{attrs:{id:"缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),s("p",[t._v("对于没有预加载的 JSBundle 在渲染前需要先下载，下载完成后 CML SDK 会缓存此 JSBundle，下次渲染同一个 JSBundle 时，如果此 JSBundle 没有更新则不会下载新的，达到节省时间和流量提升渲染速度的目的。")]),t._v(" "),s("h4",{attrs:{id:"cmlcache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmlcache"}},[t._v("#")]),t._v(" CMLCache")]),t._v(" "),s("p",[t._v("CMLCache 是一个对 js 进行下载、缓存的一个模块，根据协议来实现 js 增量更新功能。主要有以下内容")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" |\n |——CMLWeexCache   缓存模块接口类\n |——CMLCacheInfo     JsBundle文件缓存实现逻辑\n |——CMLCacheItem    jsBundle文件内存对象，描述每一个jsBundle文件的缓存状态\n |——CMLConfig    配置类，业务方可通过这个类设置是否开启缓存功能、预加载js路径、缓存大小限制、默认兜底页链接等\n")])])]),s("hr"),t._v(" "),s("h5",{attrs:{id:"cmlcache-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmlcache-2"}},[t._v("#")]),t._v(" CMLCache")]),t._v(" "),s("p",[t._v("对 jsBundle 进行预加载、获取、缓存的处理对外接口。")]),t._v(" "),s("p",[t._v("在该文件里，我们将拿到的 URL 解析出此页面需要加载的 jsbundle 标识，然后根据 jsBundle 标识来检测是否在本地已预加载，如果此 jsBundle 已预加载成功，则直接读本地缓存渲染；否则先从网络下载 jsBundle，然后渲染并缓存本地。")]),t._v(" "),s("p",[t._v("后续我们将支持在一个 URL 中下发多段 jsbundle 标识，每段 jsbundle 标识代表这个页面的一部分，然后在根据每段 jsbundle 标识，分别从本地缓存里获取去寻找对应的 js 代码，如果不存在则从网络去下载这一段 jsBundle 并保存在本地，然后 SDK 中会将最终得到的多段 jsBundle，组合成一个完整页面的 jsBundle 加载出来。")]),t._v(" "),s("h5",{attrs:{id:"cmlcacheinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmlcacheinfo"}},[t._v("#")]),t._v(" CMLCacheInfo")]),t._v(" "),s("p",[t._v("jsBundle 的内存管理器，是加载、获取、缓存等处理的实际操作者。\n对本地缓存 jsBundle 的 maxSize 加以限制，如果超过 maxSize，则优先清除老的 jsBundle 缓存")]),t._v(" "),s("h4",{attrs:{id:"cmlcacheitem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmlcacheitem"}},[t._v("#")]),t._v(" CMLCacheItem")]),t._v(" "),s("p",[t._v("对 jsBundle 的封装，包括 jsBundle 文件在本地存储的路径、内存索引；CMLCacheInfo 就是通过 CMLCacheItem 来对 jsBundle 进行操作。")]),t._v(" "),s("h5",{attrs:{id:"使用（以-weex-为例）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用（以-weex-为例）"}},[t._v("#")]),t._v(" 使用（以 Weex 为例）")]),t._v(" "),s("p",[s("strong",[t._v("缓存相关配置")])]),t._v(" "),s("p",[t._v("缓存相关配置定义位于 CMLWeexConfig （CMLConfig）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("//设置服务类型为weex\n[CMLEnvironmentManage chameleon].serviceType = CMLServiceTypeWeex;\n//设置默认错误web链接\n[CMLEnvironmentManage chameleon].weexService.config.defaultErrUrl = @“defaultErrUrl”\n")])])]),s("p",[t._v("Chameleon 功能和缓存功能都是默认开启的，如果有特殊需要，可以手动关闭；另外在这里还有缓存限制 maxSize、缓存目录等配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("[CMLEnvironmentManage chameleon].weexService.config.isFeatureAvailable = NO；\n[CMLEnvironmentManage chameleon].weexService.config.isEnableCacheFeature = NO;\n")])])]),s("p",[s("strong",[t._v("预加载")])]),t._v(" "),s("p",[t._v("//设置预加载 URL 列表")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(' [CMLEnvironmentManage chameleon].weexService.config.prefetchContents = @[@"http%3A%2F%2F172.22.139.32%3A8000%2Fweex%2Fchameleon-bridge.js%3Ft%3D1546502643623"];\n //开启预加载\n [[CMLEnvironmentManage chameleon].weexService setupPrefetch];\n')])])]),s("p",[s("strong",[t._v("获取加载 jsBundle 的 URL")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('CMLWeexCache *cache = (CMLWeexCache *)[CMLEnvironmentManage chameleon].weexService.cache;\n  //在缓存中获取JSBundle的URL（本地有缓存则获取到本地缓存的URL，本地无缓存则获取到远端的URL）\n        [cache getBundleCacheOfJSBundleUrl:self.bundleUrl completion:^(NSString *url, NSDictionary *parameter) {\n  //加载jsBundle\n  [self.render renderWithURL:[NSURL URLWithString:url] options:@{@"query" : [param copy]} data:nil];\n}\n')])])]),s("h2",{attrs:{id:"android-sdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#android-sdk"}},[t._v("#")]),t._v(" Android SDK")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/beatles-chameleon/chameleon-sdk-android",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github 地址"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("CML Android SDK 是 CML 整体框架的一部分，主要任务是完成 CML JsBundle 在 Android 端的本地渲染。SDK 底层采用 Weex 作为渲染引擎，同时扩展一些一般工程通用的基础能力，如缓存能力、降级能力等。")]),t._v(" "),s("h3",{attrs:{id:"项目结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[t._v("#")]),t._v(" 项目结构")]),t._v(" "),s("p",[t._v("项目一级目录结构如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("|+ app SDK使用示例\n|+ cmlsdk SDK接入层，抽象 CML 引擎能力、实现通用扩展能力\n|+ cmlweex 包装 Weex 渲染引擎\n|+ cmlweb 包装 Web 渲染引擎\n|+ js-bundle-mgr 实现 js bundle 预加载、缓存\n|+ rich-text-component 富文本组件\n|+ sdk-image 图片选择、图片拍摄组件\n|+ sdk-location 位置组件\n")])])]),s("p",[t._v("cmlsdk 模块单独拿出来看下目录结构：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("|- cmlsdk\n    |+ adapter 定义了扩展能力的接口以及默认实现，无默认实现的能力需要第三方项目根据自己的实际业务需求去实现\n    |+ bridge 定义了 js 和 Native 通信的接口，实现协议相关的处理能力，以及实现了协议层使用入口\n    |+ bundle js bundle 相关定义，目前只有一个类用来描述 js bundle 相关信息\n    |+ common 通用能力的基础封装类\n    |+ container 渲染容器的抽象能力定义\n    |+ extend CML 提供的一些能力\n    |+ Module 扩展能力管理，收集 sdk 默认提供的以及第三方用户自己实现的 Module，根据 bridge 层指令执行具体某个 Module 的某个 method\n    |+ utils 工具类集合\n    |+ widget 自定义的widget，目前只有一个 title bar，用做 webview 渲染容器的action bar\n    |- CmlBaseLifecycle 生命周期的接口定义\n    |- CmlConstant 常量定义\n    |- CmlEngine CML SDK 使用入口\n    |- CmlEnvironment 运行环境和运行参数配置入口、扩展能力设置入口\n    |- CmlInstanceManage 页面运行实例的管理类，每一个容器实例运行时，其对应的Instance会注册到这里\n    |- ICmlEngine 引擎的抽象接口\n    |- ICmlInstance 容器实例抽象接口\n    |- ICmlActivityInstance 全屏容器实例抽象接口\n    |- ICmlViewInstance 视图容器实例抽象接口\n")])])]),s("p",[t._v("项目整体架构如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(391),alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"cml-使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cml-使用"}},[t._v("#")]),t._v(" CML 使用")]),t._v(" "),s("p",[t._v("CML Android SDK 的使用步骤如下:")]),t._v(" "),s("ul",[s("li",[t._v("引用 CML 及工程需要的相关类库")]),t._v(" "),s("li",[t._v("在项目中初始化 CML SDK")]),t._v(" "),s("li",[t._v("加载 JS Bundle")])]),t._v(" "),s("p",[t._v("详细的使用方式可以参看手把手系列之"),s("RouterLink",{attrs:{to:"/tutorial/android-sdk.html"}},[t._v("CML Android SDK 使用范例")]),t._v("，建议"),s("font",{attrs:{color:"#FF0000"}},[t._v("先看使用范例")]),t._v("再阅读其他章节。")],1),t._v(" "),s("p",[t._v("如果需要自定义自己的 Adapter，参看"),s("a",{attrs:{href:"#adapter-%E7%9A%84%E4%BD%BF%E7%94%A8"}},[t._v("Adapter 的使用")]),t._v(" 一节。如果需要扩展 Module，参看"),s("a",{attrs:{href:"#module-%E7%9A%84%E4%BD%BF%E7%94%A8"}},[t._v("Module 的使用")]),t._v("一节。")]),t._v(" "),s("h3",{attrs:{id:"基础类说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础类说明"}},[t._v("#")]),t._v(" 基础类说明")]),t._v(" "),s("h4",{attrs:{id:"cmlengine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmlengine"}},[t._v("#")]),t._v(" CmlEngine")]),t._v(" "),s("p",[t._v("此类是 "),s("em",[t._v("Chameleon/kəˈmiːlɪən/")]),t._v(" SDK 的入口类，提供基本的初始化入口和 "),s("em",[t._v("Chameleon")]),t._v("容器的调起能力。具体包含以下能力")]),t._v(" "),s("ul",[s("li",[t._v("SDK 初始化入口")]),t._v(" "),s("li",[t._v("调起渲染容器")]),t._v(" "),s("li",[t._v("初始化预加载列表")]),t._v(" "),s("li",[t._v("注册扩展 Module")])]),t._v(" "),s("h4",{attrs:{id:"cmlenvironment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmlenvironment"}},[t._v("#")]),t._v(" CmlEnvironment")]),t._v(" "),s("p",[t._v("CmlEnvironment 主要提供了开发期间需要的一些能力，如")]),t._v(" "),s("ul",[s("li",[t._v("调试开关")]),t._v(" "),s("li",[t._v("降级开关")]),t._v(" "),s("li",[t._v("缓存开关")])]),t._v(" "),s("p",[t._v("以及一些常量的定义，如")]),t._v(" "),s("ul",[s("li",[t._v("预加载的最大缓存")]),t._v(" "),s("li",[t._v("运行时的最大缓存")])]),t._v(" "),s("p",[t._v("adapter 设置和获取，详情参看"),s("a",{attrs:{href:"#adapter-%E7%9A%84%E4%BD%BF%E7%94%A8"}},[t._v("Adapter 的使用")]),t._v("一节")]),t._v(" "),s("ul",[s("li",[t._v("各种能力的自定义实现配置入口")])]),t._v(" "),s("h3",{attrs:{id:"富文本组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#富文本组件"}},[t._v("#")]),t._v(" 富文本组件")]),t._v(" "),s("p",[t._v("富文本是 CML 里唯一一个默认注册的组件，主要有以下内容")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" |\n |-richinfo     主要是富文本需要定义的协议、点击事件的回调等\n |-utils    工具类，主要是加载assets下默认的字体\n |-CmlRichTextComponent     继承与与CmlComponent的富文本组件\n |-CmlRichTextEngine     富文本入口类，\n")])])]),s("hr"),t._v(" "),s("h4",{attrs:{id:"richinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#richinfo"}},[t._v("#")]),t._v(" richinfo")]),t._v(" "),s("ul",[s("li",[t._v("CmlClickSpanListener：富文本点击事件回调")]),t._v(" "),s("li",[t._v("CmlCustomTypefaceSpan：加载自定义字体")]),t._v(" "),s("li",[t._v("CmlRichInfo：富文本协议及实现")]),t._v(" "),s("li",[t._v("CmlRichInfoSpan：配合 CmlRichInfo 显示富文本文字，可直接设置给 TextView")])]),t._v(" "),s("h4",{attrs:{id:"utils"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#utils"}},[t._v("#")]),t._v(" utils")]),t._v(" "),s("ul",[s("li",[t._v("CmlFontUtil：主要就是加载自定义字体，如 assets 下 fonts 包下的 Barlow-Medium.ttf 字体")])]),t._v(" "),s("h3",{attrs:{id:"module-的使用-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module-的使用-2"}},[t._v("#")]),t._v(" Module 的使用")]),t._v(" "),s("p",[t._v("github 地址"),s("a",{attrs:{href:"https://github.com/beatles-chameleon/chameleon-sdk-android",target:"_blank",rel:"noopener noreferrer"}},[t._v("点这里"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("font",{attrs:{color:"#FF0000"}},[t._v("根目录 assets 目录下的 cml-demo-say.zip")]),t._v(" 是个简单的示例工程，用来演示 Native 和 Weex 容器或 Web 容器的双向通信")],1),t._v(" "),s("h4",{attrs:{id:"什么是-module-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-module-2"}},[t._v("#")]),t._v(" 什么是 Module")]),t._v(" "),s("p",[t._v("module 是 Native 提供给前端页面调用的，完成一组操作的方法集合，用于扩展 Native 的能力。在 CML 页面中，开发者引入相关 js 库后即可调用 Module 中的方法。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import bridge from 'chameleon-bridge';\n\n// 主动调用客户端方法\nexport function sayHello() {\n    bridge.callNative(\n        'moduleDemo', // 模块名\n        'sayHello', // 方法名\n        {}, // 参数\n        res => {} // 回调方法\n    );\n}\n")])])]),s("h4",{attrs:{id:"使用-module-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-module-2"}},[t._v("#")]),t._v(" 使用 Module")]),t._v(" "),s("p",[t._v("Module 的使用分两种情况，一种是使用 CML SDK 内置的 Module，一种是用户自定义实现自己的 Module。")]),t._v(" "),s("h5",{attrs:{id:"使用内置的-module-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用内置的-module-2"}},[t._v("#")]),t._v(" 使用内置的 Module")]),t._v(" "),s("p",[t._v("内置的 Module 在 js 前端代码里直接使用即可，目前内置的 Module 有：")]),t._v(" "),s("ul",[s("li",[t._v("clipboard")]),t._v(" "),s("li",[t._v("cml")]),t._v(" "),s("li",[t._v("modal")]),t._v(" "),s("li",[t._v("storage")]),t._v(" "),s("li",[t._v("stream")]),t._v(" "),s("li",[t._v("webSocket")])]),t._v(" "),s("p",[t._v("API 里描述的能力，部分实现就是由上述 Module 支撑的。")]),t._v(" "),s("h5",{attrs:{id:"自定义实现自己的-module-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义实现自己的-module-2"}},[t._v("#")]),t._v(" 自定义实现自己的 Module")]),t._v(" "),s("p",[t._v("示例可参看"),s("RouterLink",{attrs:{to:"/tutorial/android-sdk.html#初始化入口"}},[t._v("CML Android SDK 使用范例")])],1),t._v(" "),s("p",[t._v("module 扩展 3 个重要的注解")]),t._v(" "),s("ul",[s("li",[t._v("@CmlModule 标注这个类是扩展模块")]),t._v(" "),s("li",[t._v("@CmlMethod 标注可供 JS 侧调用的方法")]),t._v(" "),s("li",[t._v("@CmlParam 标注调用的参数")])]),t._v(" "),s("p",[t._v("详细说明")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("功能：通过注册 Module 提供原生能力的扩展")])]),t._v(" "),s("li",[s("p",[t._v("原理：依赖 bridge 进行协议通信，根据不同 Module 进行协议处理分发")])]),t._v(" "),s("li",[s("p",[t._v("Module，扩展原生能力")]),t._v(" "),s("ul",[s("li",[t._v("Module 注册\n"),s("ul",[s("li",[t._v("必须注册 CmlEngine.registerModule(Class<?> moduleClass)")]),t._v(" "),s("li",[t._v("不强制要求添加@CmlModule,未添加时会使用默认设置")]),t._v(" "),s("li",[t._v("不建议在运行中动态注册 Module")])])]),t._v(" "),s("li",[t._v("Module 名称\n"),s("ul",[s("li",[t._v("默认使用 Module 的类名")]),t._v(" "),s("li",[t._v('配置 Module 名称，添加注解@CmlModule(alias = "name")')])])]),t._v(" "),s("li",[t._v("Module 实例\n"),s("ul",[s("li",[t._v("默认为实例全局唯一，即无论有多少 instance 都会使用同一个 Module 实例")]),t._v(" "),s("li",[t._v("配置全局性，添加注解@CmlModule(global = false)")])])]),t._v(" "),s("li",[t._v("Module 组合\n"),s("ul",[s("li",[t._v("针对极特殊情况，允许多个 class 共用一个 Module 名称")]),t._v(" "),s("li",[t._v("必须有且只有一个 class 作为 Module，所有相关 class 均会使用该 moduel 配置")]),t._v(" "),s("li",[t._v('其余 class 必须使用@CmlJoin(name = "name")，指定需要关联的 moduel 名称')]),t._v(" "),s("li",[t._v("每个 class 实例之间无关联，仅会在使用时再创建实例")])])])])]),t._v(" "),s("li",[s("p",[t._v("method，提供原生能力方法")]),t._v(" "),s("ul",[s("li",[t._v("method 注册\n"),s("ul",[s("li",[t._v("自动注册 Module 类中所有的 public 方法")]),t._v(" "),s("li",[t._v("不强制要求添加@CmlMethod,未添加时会使用默认设置")]),t._v(" "),s("li",[t._v("如果不希望方法被误添加，需要在方法上添加@CmlIgnore")])])]),t._v(" "),s("li",[t._v("method 名称\n"),s("ul",[s("li",[t._v("默认使用 method 方法名")]),t._v(" "),s("li",[t._v('配置 method 名称，添加注解@CmlMethod(alias = "name")')])])]),t._v(" "),s("li",[t._v("method 线程\n"),s("ul",[s("li",[t._v("默认运行在主线程")]),t._v(" "),s("li",[t._v("配置 method 线程，添加注解@CmlMethod(uiThread = false)")])])])])]),t._v(" "),s("li",[s("p",[t._v("param，原生能力方法所需要的参数")]),t._v(" "),s("ul",[s("li",[t._v("param 类型\n"),s("ul",[s("li",[t._v("针对 Context、ICmlInstance 等上下文类型，会根据调用环境进行查找替换")]),t._v(" "),s("li",[t._v("对于 CmlCallback 的类型，会构建对应的回调，需要自行处理回调")]),t._v(" "),s("li",[t._v("其余类型会根据 bridge 传递的参数进行处理")])])]),t._v(" "),s("li",[t._v("param 参数\n"),s("ul",[s("li",[t._v("根据 birdge 传递的数据，根据参数类型进行转化")]),t._v(" "),s("li",[t._v("目前可转化的类型为 JSONObject、String")]),t._v(" "),s("li",[t._v("如果要直接转为对象，需要设置 CmlJsonAdapter 或接入相应 json 库")])])]),t._v(" "),s("li",[t._v("param 字段\n"),s("ul",[s("li",[t._v("只想获取传递数据中的某一个对象时，可以使用@CmlParam")]),t._v(" "),s("li",[t._v('添加@CmlParam(name = "name")，设置该参数获取的字段')]),t._v(" "),s("li",[t._v('添加@CmlParam(admin = "admin")，设置该参数默认值')])])])])])]),t._v(" "),s("h3",{attrs:{id:"adapter-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adapter-的使用"}},[t._v("#")]),t._v(" Adapter 的使用")]),t._v(" "),s("h4",{attrs:{id:"初步认识-adapter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初步认识-adapter"}},[t._v("#")]),t._v(" 初步认识 Adapter")]),t._v(" "),s("p",[t._v("先看个例子，对 Adapter 有个直观印象和基本概念。Chameleon SDK 里打印日志使用的是默认的 android.util.Log, 如果想替换它可以按照如下步骤实行：")]),t._v(" "),s("h5",{attrs:{id:"替换和注册"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#替换和注册"}},[t._v("#")]),t._v(" 替换和注册")]),t._v(" "),s("p",[t._v("如果用户想替换 SDK 默认提供的日志打印，可以实现 CmlLoggerAdapter 接口，并按如下方式注册进 SDK:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 接口实现\npublic class MyLoggerDefault implements CmlLoggerAdapter {\n\t@Override\n    public void d(String tag, String msg) {\n        // 这里实现自己的日志打印\n    }\n\t...\n}\n\n// 接口注册\npublic class MyApplication extends Application implements ICmlConfig {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        CmlEngine.getInstance().init(this, this);\n    }\n\n    @Override\n    public void configAdapter() {\n        CmlEnvironment.setLoggerAdapter(new MyLoggerDefault()); // 注册自己的Adapter\n        ...\n    }\n\t...\n}\n\n")])])]),s("p",[t._v("以上就完成了日志打印能力的替换。")]),t._v(" "),s("h5",{attrs:{id:"原理说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理说明"}},[t._v("#")]),t._v(" 原理说明")]),t._v(" "),s("p",[t._v("SDK Adapter 定义和默认实现如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 日志接口定义\npublic interface CmlLoggerAdapter {\n\tvoid d(String tag, String msg);\n\t...\n}\n\n// 日志接口默认实现\npublic class CmlLoggerDefault implements CmlLoggerAdapter {\n\t@Override\n    public void d(String tag, String msg) {\n        Log.d(tag, msg);\n    }\n\t...\n}\n")])])]),s("p",[t._v("如果用户注册了自己的 Log Adapter 实现则优先使用，否则使用 SDK 默认提供的实现。")]),t._v(" "),s("h5",{attrs:{id:"日志打印的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日志打印的使用"}},[t._v("#")]),t._v(" 日志打印的使用")]),t._v(" "),s("p",[t._v("日志打印通过 CmlLogUtil 类调用，注册自己的 Logger Adapter 后，打印日志的相关方法就会回调到自定义的方法实现里，使用示例：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    // 日志打印\n    public void launchPage(@NonNull Activity activity, String url, HashMap<String, Object> options) {\n        if (TextUtils.isEmpty(url)) {\n            CmlLogUtil.e(TAG, "CmlEngine launchPage, url is empty.");\n            return;\n        }\n        ...\n    }\n')])])]),s("h4",{attrs:{id:"adapter-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adapter-基本概念"}},[t._v("#")]),t._v(" Adapter 基本概念")]),t._v(" "),s("p",[t._v("Adapter 的目的是定义一系列能力接口来隔离具体的实现，方便 SDK 使用者在需要时灵活替换成自己的实现。Chameleon SDK 框架层在使用 Adapter 相关能力时都是面向接口的，使用者只需要实现相关能力的 Adapter 接口并通过 SDK 注册接口进行注册，即可轻松替换成自己的实现并进行能力扩展。")]),t._v(" "),s("p",[t._v("Chameleon SDK 并没有完整的实现所有 Adapter 接口，也就是说一部分有默认实现的 Adapter 可以直接使用，未提供默认实现的需要使用者自己实现，否则框架将无法使用对应的接口能力。")]),t._v(" "),s("p",[t._v("Chameleon SDK 定义了如下的 Adapter 接口")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("接口")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("功能")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("默认实现")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ICmlDegradeAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("降级")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("无")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ICmlImgLoaderAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("图片加载")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CmlLoggerAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("日志")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ICmlNavigatorAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("url 跳转")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ICmlStatisticsAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("统计信息输出")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("无")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("ICmlWebSocketAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("WebSocket")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CmlHttpAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Http 请求")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CmlJsonAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("json 解析")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CmlDialogAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("对话框")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CmlToastAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("提示浮层")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CmlStorageAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("key->value 存储")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("CmlThreadAdapter")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("线程")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有")])])])]),t._v(" "),s("h5",{attrs:{id:"重点-adapter-说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重点-adapter-说明"}},[t._v("#")]),t._v(" 重点 Adapter 说明")]),t._v(" "),s("p",[t._v("降级、对话框、提示浮层 Adapter 在 SDK 实际使用时替换可能性较大，分别说明。")]),t._v(" "),s("p",[s("strong",[t._v("降级")])]),t._v(" "),s("p",[t._v("ICmlDegradeAdapter 降级接口没有提供默认实现，"),s("RouterLink",{attrs:{to:"/tutorial/android-sdk.html"}},[t._v("CML Android SDK 使用范例")]),t._v(" 示例里示范了如何实现一个降级处理类 CmlDegradeDefault。\nCmlDegradeDefault 默认会关闭 Native 渲染容器，并打开 Web 容器加载降级 url。")],1),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class CmlDegradeDefault implements ICmlDegradeAdapter {\n\n    @Override\n    public DegradeViewWrapper getDegradeView(int degradeCode) {\n        return new DegradeViewWrapper() {\n            CmlWebView webView;\n\n            @Override\n            public View getView(@NonNull Context context) {\n                webView = new CmlWebView(context);\n                webView.onCreate();\n                return webView;\n            }\n\n            @Override\n            public void onDestroy() {\n                if (null != webView) {\n                    webView.onDestroy();\n                }\n            }\n\n            @Override\n            public void loadURL(@NonNull Context context, @NonNull String url, @Nullable HashMap<String, Object> options) {\n                if (null != webView) {\n                    webView.render(url, null);\n                }\n            }\n        };\n    }\n\n    @Override\n    public void degradeActivity(@NonNull Activity activity, @NonNull String url, @Nullable HashMap<String, Object> options, int degradeCode) {\n        if (url.contains("?")) {\n            url = url.substring(0, url.indexOf("?"));\n        }\n        CmlEngine.getInstance().launchPage(activity, url, null);\n    }\n}\n')])])]),s("p",[t._v("degradeActivity 会在如下降级场景发生时回调")]),t._v(" "),s("ul",[s("li",[t._v("下载 JSBundle 失败")]),t._v(" "),s("li",[t._v("解析 JSBundle 发生异常")]),t._v(" "),s("li",[t._v("降级调试开关打开(在 CmlEnvironment 里设置)")]),t._v(" "),s("li",[t._v("前端代码手动降级")])]),t._v(" "),s("p",[s("strong",[t._v("对话框")])]),t._v(" "),s("p",[t._v("此接口定义以下两种对话框能力")]),t._v(" "),s("ul",[s("li",[t._v("showAlert")]),t._v(" "),s("li",[t._v("showConfirm")])]),t._v(" "),s("p",[t._v("CmlModalTip 实现了此接口，通过 CmlModalModule 类暴露给 JS 侧调用，前端用法参考 API"),s("RouterLink",{attrs:{to:"/api/#交互反馈"}},[t._v("交互反馈")])],1),t._v(" "),s("p",[s("strong",[t._v("提示浮层")])]),t._v(" "),s("p",[t._v("此接口定义以下浮层提示能力")]),t._v(" "),s("ul",[s("li",[t._v("showToast")])]),t._v(" "),s("p",[t._v("CmlModalTip 实现了此接口，通过 CmlModalModule 类暴露给 JS 侧调用，前端用法参考 API"),s("RouterLink",{attrs:{to:"/api/#交互反馈"}},[t._v("交互反馈")])],1),t._v(" "),s("h5",{attrs:{id:"其他-adapter-说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他-adapter-说明"}},[t._v("#")]),t._v(" 其他 Adapter 说明")]),t._v(" "),s("p",[s("strong",[t._v("图片加载")])]),t._v(" "),s("p",[t._v("CmlDefaultImgLoaderAdapter ，默认使用 Glide，需要用户手动集成 Glide")]),t._v(" "),s("p",[s("strong",[t._v("日志打印")])]),t._v(" "),s("p",[t._v("CmlLoggerDefault，默认使用系统 log 输出")]),t._v(" "),s("p",[s("strong",[t._v("跳转")])]),t._v(" "),s("p",[t._v("默认使用 Intent.ACTION_VIEW 处理")]),t._v(" "),s("p",[s("strong",[t._v("统计信息输出")])]),t._v(" "),s("p",[t._v("没有默认实现，不关心可以不用实现")]),t._v(" "),s("p",[s("strong",[t._v("WebSocket")])]),t._v(" "),s("p",[t._v("CmlDefaultWebSocketAdapter，默认使用 OkHttp3，需要用户手动集成 OkHttp3")]),t._v(" "),s("p",[s("strong",[t._v("Http 请求")])]),t._v(" "),s("p",[t._v("执行 http 请求，并监听 http 响应")]),t._v(" "),s("p",[s("strong",[t._v("json 解析")])]),t._v(" "),s("p",[t._v("转换成 json 字符串和反解成 json 对象")]),t._v(" "),s("p",[s("strong",[t._v("key->value 存储")])]),t._v(" "),s("p",[t._v("前端用法参考 API"),s("RouterLink",{attrs:{to:"/api/#数据存储"}},[t._v("数据存储")])],1),t._v(" "),s("p",[s("strong",[t._v("线程")])]),t._v(" "),s("p",[t._v("定义工作线程和 ui 线程")]),t._v(" "),s("h3",{attrs:{id:"预加载和缓存-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预加载和缓存-2"}},[t._v("#")]),t._v(" 预加载和缓存")]),t._v(" "),s("h4",{attrs:{id:"预加载和缓存概念-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预加载和缓存概念-2"}},[t._v("#")]),t._v(" 预加载和缓存概念")]),t._v(" "),s("p",[t._v("预加载和缓存都是为了节省 JSBundle 下载的时间，加快 UI 的渲染。")]),t._v(" "),s("h5",{attrs:{id:"预加载-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预加载-2"}},[t._v("#")]),t._v(" 预加载")]),t._v(" "),s("p",[t._v("预加载是将下载 JSBundle 的动作提前完成，在需要用到的时候直接从本地读取并渲染。实际项目使用中，可以将需要预加载的 url 地址列表在 app 启动时提前从服务端获取，通过 CML SDK 提供的预加载能力提前下载下来。")]),t._v(" "),s("h5",{attrs:{id:"缓存-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存-2"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),s("p",[t._v("对于没有预加载的 JSBundle 在渲染前需要先下载，下载完成后 CML SDK 会缓存此 JSBundle，下次渲染同一个 JSBundle 时，如果此 JSBundle 没有更新则不会下载新的，达到节省时间和流量提升渲染速度的目的。")]),t._v(" "),s("h4",{attrs:{id:"jsbundlemgr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsbundlemgr"}},[t._v("#")]),t._v(" JsBundleMgr")]),t._v(" "),s("p",[t._v("JsBundleMgr 是一个对 js 进行下载、缓存的一个模块，根据协议来实现 js 增量更新功能。主要有以下内容")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" |\n |——cache    基于DiskLrucache来实现缓存功能\n |——code     js代码的获取及管理\n |——net      采用httpUrlConnect实现下载功能\n |——utils    工具包\n |——CmlJsBundleConstant  常量的管理\n |——CmlJsBundleEngine    实现了CmlJsBundleManager接口，入口类\n |——CmlJsBundleEnvironment   当前环境的设置，如debug环境等\n |——CmlJsBundleManager   实现此接口可自己定义JsBundle的管理\n |——CmlJsBundleMgrConfig    配置类，设置预加载js路径、缓存大小等，默认预加载及运行时缓存大小是4M，可自行设置\n")])])]),s("hr"),t._v(" "),s("h5",{attrs:{id:"code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[t._v("#")]),t._v(" code")]),t._v(" "),s("p",[t._v("对 js 代码进行预加载、获取、缓存的管理。在该包里，我们将拿到的 url 根据协议来拆分成多个 url1、url2 等，然后在根据 url1、url2 等来获取对应的 js 代码，首先从本地缓存里获取去寻找对应的 js 代码，如果不存在则从网络去下载并保存在本地")]),t._v(" "),s("h5",{attrs:{id:"utils-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#utils-2"}},[t._v("#")]),t._v(" utils")]),t._v(" "),s("p",[t._v("一些文件管理、拆分 url、网络判断的工具类")]),t._v(" "),s("ul",[s("li",[t._v("CmlCodeUtils：获取到的 url、code 的拆解及合并")]),t._v(" "),s("li",[t._v("CmlFileUtils：sd 卡及缓存目录的判断")]),t._v(" "),s("li",[t._v("CmlLogUtils：Log 的实现")]),t._v(" "),s("li",[t._v("CmlNetworkUtils：当前网络状态的判断，如 Wi-Fi、4g 等")]),t._v(" "),s("li",[t._v("CmlUtils：Md5 的生成、主线程判断等等")])]),t._v(" "),s("h5",{attrs:{id:"cmljsbundleconstant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmljsbundleconstant"}},[t._v("#")]),t._v(" CmlJsBundleConstant")]),t._v(" "),s("p",[t._v("缓存文件名、预加载优先级的管理，预加载优先级有以下三种类型")]),t._v(" "),s("ul",[s("li",[t._v("普通（PRIORITY_COMMON）：非 Wi-Fi 情况不预加载")]),t._v(" "),s("li",[t._v("强预加载（PRIORITY_FORCE）：无论什么网络情况都预加载")]),t._v(" "),s("li",[t._v("强预加载+预解析（PRIORITY_FORCE_MAX）：目前未用到")])]),t._v(" "),s("h5",{attrs:{id:"cmljsbundleengine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmljsbundleengine"}},[t._v("#")]),t._v(" CmlJsBundleEngine")]),t._v(" "),s("p",[t._v("实现了 CmlJsBundleManager 接口，主要有以下三个方法")]),t._v(" "),s("ul",[s("li",[t._v("initConfig(Context,CmlJsBundleMgrConfig)：初始化 config，主要是设置预加载 url、预加载缓存、运行时缓存的设置，预加载及运行时缓存默认为 4M")]),t._v(" "),s("li",[t._v("startPreload()：开始预加载，目前预加载成功或者失败并没有任何信息返回，只能查看 log 进行分析")]),t._v(" "),s("li",[t._v("getWXTemplate(String,CmlGetCodeStringCallback)：获取 js 代码")])]),t._v(" "),s("h5",{attrs:{id:"cmljsbundlemanager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmljsbundlemanager"}},[t._v("#")]),t._v(" CmlJsBundleManager")]),t._v(" "),s("p",[t._v("实现此接口可以自己定义 JsBundleMgr 的实现")]),t._v(" "),s("h5",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("p",[s("strong",[t._v("添加依赖")])]),t._v(" "),s("div",{staticClass:"language-gradle extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("compile 'com.didiglobal.chameleon:js-bundle-mgr:latest.version'\n")])])]),s("p",[s("strong",[t._v("预加载")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleEnvironment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEBUG "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlModel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" cmlModels "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlModel")]),t._v(" model "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlModel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bundle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlUtils")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseWeexUrl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cmlModels"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        model "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlModel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bundle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlUtils")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseWeexUrl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cmlModels"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleMgrConfig")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleMgrConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Builder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPreloadList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmlModels"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startPreload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("获取 Js 代码")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleMgrConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Builder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlUtils")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseWeexUrl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlJsBundleEngine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getWXTemplate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CmlGetCodeStringCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onSuccess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" codes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TAG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onSuccess: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" codes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onFailed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" errMsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TAG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onFailed: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" errMsg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"sdk-独有方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sdk-独有方法"}},[t._v("#")]),t._v(" SDK 独有方法")]),t._v(" "),s("h3",{attrs:{id:"getsdkinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getsdkinfo"}},[t._v("#")]),t._v(" getSDKInfo")]),t._v(" "),s("p",[t._v("获得 SDK 信息")]),t._v(" "),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),s("p",[t._v("无")]),t._v(" "),s("h4",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),s("p",[t._v("返回 promise")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("version")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("String")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("版本号")])])])]),t._v(" "),s("h3",{attrs:{id:"insdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#insdk"}},[t._v("#")]),t._v(" inSDK")]),t._v(" "),s("p",[t._v("同步方法，判断 webview 或 Native 页面是否在 sdk 环境中，目前只用于内部封装方法使用。")]),t._v(" "),s("h4",{attrs:{id:"参数-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数-2"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),s("p",[t._v("无")]),t._v(" "),s("h4",{attrs:{id:"返回值-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值-2"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("value")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Boolean")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("true：在 sdk 环境中；false：不在 sdk 环境中")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import bridge from 'chameleon-bridge';\nconst inSDK = bridge.inSDK(); // true/false\n")])])]),s("h3",{attrs:{id:"rollbackweb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rollbackweb"}},[t._v("#")]),t._v(" rollbackWeb")]),t._v(" "),s("p",[t._v("降级到 cmlUrl 对应的 h5 地址。")]),t._v(" "),s("h3",{attrs:{id:"callnative-module-string-method-string-args-object-callback-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#callnative-module-string-method-string-args-object-callback-function"}},[t._v("#")]),t._v(" callNative(module:String, method:String, args:Object, callback:Function)")]),t._v(" "),s("p",[t._v("js 调用 Native sdk")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import bridge from 'chameleon-bridge';\n\n// 主动调用客户端方法\nexport function sayHello() {\n    bridge.callNative(\n        'moduleDemo', // 模块名\n        'sayHello', // 方法名\n        {}, // 参数\n        res => {} // 回调方法\n    );\n}\n")])])]),s("h3",{attrs:{id:"listennative-module-string-method-string-callback-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#listennative-module-string-method-string-callback-function"}},[t._v("#")]),t._v(" listenNative(module:String, method:String, callback:Function)")]),t._v(" "),s("p",[t._v("监听客户端调用 js")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import bridge from 'chameleon-bridge';\n\n// 监听客户端调用js\nexport function listenTell() {\n    bridge.listenNative(\n        'moduleDemo', // 模块名\n        'NaTellJS', // 方法名\n        res => {\n         // 回调方法中处理返回的数据\n        }\n    );\n}\n")])])]),s("h2",{attrs:{id:"端-js-包缓存、更新、预加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#端-js-包缓存、更新、预加载"}},[t._v("#")]),t._v(" 端 JS 包缓存、更新、预加载")]),t._v(" "),s("h3",{attrs:{id:"缓存策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[t._v("#")]),t._v(" 缓存策略")]),t._v(" "),s("p",[t._v("浏览器在加载静态资源的时候一般的话会使用两种 HTTP 缓存管理机制：")]),t._v(" "),s("ul",[s("li",[t._v("强制缓存(Cache-Control、Expires)")]),t._v(" "),s("li",[t._v("协商式缓存(ETag、Last-Modified)")])]),t._v(" "),s("p",[t._v("类似的，在使用"),s("code",[t._v("chameleon sdk")]),t._v("加载 JS 包的时候也会提供两种缓存管理机制：")]),t._v(" "),s("ul",[s("li",[t._v("基于 LRU 的强制缓存")]),t._v(" "),s("li",[t._v("类 HTTP 的协商式缓存(后续发布)")])]),t._v(" "),s("h4",{attrs:{id:"基于-lru-的强制缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于-lru-的强制缓存"}},[t._v("#")]),t._v(" 基于 LRU 的强制缓存")]),t._v(" "),s("p",[t._v("基于"),s("a",{attrs:{href:"https://baike.baidu.com/item/LRU",target:"_blank",rel:"noopener noreferrer"}},[t._v("LRU"),s("OutboundLink")],1),t._v("的"),s("code",[t._v("缓存策略")]),t._v("，简单来说就是实现了一个"),s("code",[t._v("缓存池")]),t._v("，每次请求先从缓存池中搜索一下，如果有就直接使用缓存池中的 JS 包，如果没有，就从网络上请求 JS 包并将其缓存在缓存池中，每一份 JS 包缓存按照"),s("code",[t._v("最后使用时间")]),t._v("排序，当缓存池满了以后，将最早使用过的缓存从缓存池中"),s("code",[t._v("清理")]),t._v("出去，保证客户端上的资源占用可控。")]),t._v(" "),s("h5",{attrs:{id:"如何配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何配置"}},[t._v("#")]),t._v(" 如何配置")]),t._v(" "),s("ul",[s("li",[t._v("iOS")]),t._v(" "),s("li",[t._v("Android")])]),t._v(" "),s("h4",{attrs:{id:"类-http-的协商式缓存-后续发布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类-http-的协商式缓存-后续发布"}},[t._v("#")]),t._v(" 类 HTTP 的协商式缓存(后续发布)")]),t._v(" "),s("p",[t._v("与普通浏览器实现的协商式缓存类似，用户只需在静态资源服务端配置好静态资源的协商式缓存头部，即可实现与普通浏览器一致的方式使用协商式缓存。")]),t._v(" "),s("h3",{attrs:{id:"更新策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新策略"}},[t._v("#")]),t._v(" 更新策略")]),t._v(" "),s("p",[t._v("当 JS 包升级迭代需要在客户端内使用最新的包时，在使用两种缓存方式下，相应的存在两周更新方式，下面会详细介绍")]),t._v(" "),s("h4",{attrs:{id:"强制缓存下的更新："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存下的更新："}},[t._v("#")]),t._v(" 强制缓存下的更新：")]),t._v(" "),s("p",[t._v("由于强制缓存，客户端不会主动的去向服务器请求最新的更新包，会导致客户端一直使用老的版本。")]),t._v(" "),s("p",[t._v("为了能够打到规避这种情况，我们提供了一种可供参考的解决方案：")]),t._v(" "),s("ol",[s("li",[t._v("配置文件指纹")])]),t._v(" "),s("p",[t._v("设置"),s("code",[t._v("chameleon.config.js")]),t._v("中的"),s("code",[t._v("hash: true")]),t._v("，具体可参考工程化配置之"),s("RouterLink",{attrs:{to:"/docs/config.html"}},[t._v("文件指纹")]),t._v("， CML 项目构建出的 JS 包文件名会类似如下")],1),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("test_project_c6bdf9074a821f01e70f.js\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("上线打包出来的 JS 包")])]),t._v(" "),s("p",[t._v("得到以下可以访问的资源地址")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("https://www.static.com/test_project_c6bdf9074a821f01e70f.js\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("替换入口资源地址")])]),t._v(" "),s("p",[t._v("将入口页面中的 cmlUrl "),s("code",[t._v("cml_addr")]),t._v(" 替换成 "),s("code",[t._v("encodeURIComponent")]),t._v(" 后的最新资源地址即可，比如")]),t._v(" "),s("p",[t._v("原 cmlUrl:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("https://www.static.com/test_project.html?cml_addr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https%3A%2F%2Fwww.static.com%2Ftest_project_21f01e70fc6bdf9074a8.js\n")])])]),s("p",[t._v("新的 cmlUrl")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("https://www.static.com/test_project.html?cml_addr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https%3A%2F%2Fwww.static.com%2Ftest_project_c6bdf9074a821f01e70f.js\n")])])]),s("p",[s("strong",[t._v("最佳实践")])]),t._v(" "),s("p",[t._v("由于强制缓存下每次修改都需要修改入口页面的 cmlUrl 中的 "),s("code",[t._v("cml_addr")]),t._v(" 参数，可能会导致修改频繁影响效率，所以建议通过后端读取 "),s("code",[t._v("map.json")]),t._v(" 的方式下发跳转 cmlUrl 进行统一管理。")]),t._v(" "),s("p",[t._v("具体请求过程如下图所示:")]),t._v(" "),s("p",[s("img",{attrs:{src:e(392),alt:"示意图"}})]),t._v(" "),s("ol",[s("li",[t._v("JS 包修改上线后，同时将"),s("code",[t._v("map.json")]),t._v("上线到服务器上")]),t._v(" "),s("li",[t._v("入口页面加载数据时，服务器从"),s("code",[t._v("map.json")]),t._v("文件中查询到要跳转的 cmlUrl，并与初始化数据合并和下发给入口页面。")]),t._v(" "),s("li",[t._v("入口页面逻辑将接受到的 cmlUrl 作为需要跳转的链接进行使用。")])]),t._v(" "),s("p",[t._v("这样每次 bundle 修改后可以自动完成更新")]),t._v(" "),s("h4",{attrs:{id:"协商式缓存下的更新："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商式缓存下的更新："}},[t._v("#")]),t._v(" 协商式缓存下的更新：")]),t._v(" "),s("p",[t._v("可以直接使用 http 的缓存更新策略，不需额外的配置。")]),t._v(" "),s("h3",{attrs:{id:"预加载-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预加载-3"}},[t._v("#")]),t._v(" 预加载")]),t._v(" "),s("p",[t._v("在某些场景下，为了能够让页面更快的呈现在用户面前，需要让客户端提前下载一些 js 包，这时就需要用到预加载。")]),t._v(" "),s("h4",{attrs:{id:"如何配置-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何配置-2"}},[t._v("#")]),t._v(" 如何配置")]),t._v(" "),s("ul",[s("li",[t._v("iOS")]),t._v(" "),s("li",[t._v("Android 参考"),s("RouterLink",{attrs:{to:"/tutorial/android-sdk.html"}},[t._v("CML Android SDK 使用范例")]),t._v("第 6 节")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);